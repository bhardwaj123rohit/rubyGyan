Best practices are already present in rails

---------------------------------------------------------------------
Working community... really helpful, people share solutions ....tutorials for stuff

Rail is a Ruby Gem

Freely available gems....	

Convention over configuration

Elegance(maintainable) is not optional

Do not reapeat Youself

Developer motivation and productivity are primary factors in project success

--------------------------------------------------------------------

					RVM (Ruby Version Manager)
					
	rvm list
	
	rvm install ruby
	
	rvm use 1.9.3
	
	rvm --default use 1.9.3
	
	rvm get stable
-------------------------------------------------------

					Install RVM
	
∞1. Download and run the RVM installation script

Installing the stable release version:

\curl -sSL https://get.rvm.io | bash -s stable

To get the latest development state:

\curl -sSL https://get.rvm.io | bash

Instruct RVM to not change the shell initializations files 'rc' / 'profile':

\curl -sSL https://get.rvm.io | bash -s -- --ignore-dotfiles

--------------------------------------------------------------

							MVC

Example we have a shopping website and user wants to add an item to the cart....

Requet url is http://www.myurl.com/controller/action/parameter

			  http://www.myurl.com/store/add_to_cart/123

Router Maps the requested url to the controller...

controller then may or may use parameter...here we need parameter 123

Controller Authenticates the requet made by the client  
		Controller acts as an interface to MVC
		Each controller has a view connected with it i.e. there is a default controller associated with the controller
Model is used to control the database.... Migration and creation
		Model is the place where business logic is built

It connects with the DB and fetch the details of the item using cart

-------------------------------------------------------------------

Connect 2 webpages...

<%= link_to "Hello" ,:action =>"video" %>

-------------------------------------------------------------
					Small Small views
Views associated with each controller is not the hole webpage. It's just a part of the webpage.
A web application doesn't contain many pages... It contains a page with flexibility and different parts

You can define parts that are common to each view in layout folder with name starting from _name.html.erb

<%= render 'layout/header'>
-------------------------------------------------------------------
						Different Title

We use helper modules to update the value on title on different views. By default title is same for all views, So we need to manually
update the title.

In application_helper


				def title

				base_title = " My Life"

					if @title.nil
						base_title

					else
						"#{base_title} | #{@title}"

					end
				end


				end


In application.html.erb
  				<title><%= @title %></title>



--------------------------------------------------------------------


IDE for Rail-------Rubymine----You don't need one ;)

Test driven development Agile

Define the test cases before you write the code

Testing framwork---RSpec

Ccumber---works at system level

Git---version control 
	To recover efficiently 
--------------------------------------------------------------------
Developing Web Applications using rails 

	1). Rails + Text Editor
	2). IDE- RubyGem

Choosing a database.
  Squlite 3
  MySql
  Postgres

NoSql databases Mongo and Couch 	

You don't need an IDE for rails cause code is generated by rails
		Generator
		Rake task
		Gems

Keep things simple... and easy.

IDE for RoR

NetBeans

Aptana Studio 3 

RybyMine

Komodo
-----------------------------------------------------------------------

Behaviour based development 		Vs.     	Test Driven development
---------------------------------------------------------------------------------------
Rspec- Requirment specification					We write test cases for a "unit" of functionality
												Execute the test case... and write just enough code
It's all about behaviour.						to pass	the test.
customeres can check the 
behoviour but not test cases
												Emergent Design - check for duplication and refractor to 
												to continuously improve the design.
				
												DRAWBACK:	Wrong mindset- It's all about testing. Finding the 
Developent of quality code and demonstrably		test cases and checking.
meet the customer requirement.

--------------------------------------------------------------------
Code Refracting

Code refactoring is the process of restructuring existing computer code – changing the factoring – without changing its external behavior. Refactoring improves nonfunctional attributes of the software. Advantages include improved code readability and reduced complexity; these can improve source code maintainability and create a more expressive internal architecture or object model to improve extensibility. 

--------------------------------------------------------------------
Requirement

A good requirement should be technologically achievable and testable


Traditionally Writing requirements and testcases are done by sepearate teams of experts...
And Verfying test cases is done by 3rd Team.

-----------------------------------------------------------------
Using Rspec and Ccumber

Enable us to write the requirment in structured natural language that can be easily understood the requirments and execute those
specification against the implemented code to test that code correctly implement the requriments


We write the requirement and get them verified by  the customer and stakeholder.
Test cases are simply validation of requirement against the code.

Eleminate the work to write test cases and check those test cases are satisfying your requirement

-------------------------------------------RSpec :-


RSpec is a Behaviour-Driven Development tool for Ruby programmers. BDD is an approach
to software development that combines Test-Driven Development, Domain Driven Design,
and Acceptance Test-Driven Planning. RSpec helps you do the TDD part of that equation,
focusing on the documentation and design aspects of TDD.

Used to write examples of expected behaviour of "small" section of code.

Ccumber provides plain text description of example scenarios of an application's features.

RSpec and Ccumber works hand on hand.
-------------------------------------------Ccumber
Used for writing acceptance level description

Feature Level description



-----------------------------------------------------------------------------
								Testing framework 
Test cases are written are written testing Framework according to the software environment.


In test-driven development, each new feature begins with writing a test. To write a test, the developer must clearly understand the feature's specification and requirements. The developer can accomplish this through use cases and user stories to cover the requirements and exception conditions, and can write the test in whatever testing framework is appropriate to the software environment. It could be a modified version of an existing test.

This is a differentiating feature of test-driven development versus writing unit tests after the code is written: it makes the developer focus on the requirements before writing the code, a subtle but important difference.
------------------------------------------------------------------------------
								Behavior-driven development

In software engineering, behavior-driven development (BDD) is a software development process that emerged from test-driven development (TDD).[1][2][3][vague] Behavior-driven development combines the general techniques and principles of TDD with ideas from domain-driven design and object-oriented analysis and design to provide software development and management teams with shared tools and a shared process to collaborate on software development.[1][4]


------------------------------------------------------------------------------------
								Generalisation

With Rspec and cucumber before you code make sense again

Use Rspec to specify low level functionality.

Use both to support concent	ric red-green-refractor dev-test cycles
