
Easy Syntax
OO
dynamic
Ruby support regular expressions / exp /
~= to match regular expression
Good web framework
---------------------------------------------------
Agile Sumarai

----------------------------------------------------
Release frequent increments

Write your test case before you code

Manage you code in Git Github

Deploy into Heroku

-----------------------------------------------------------

In Ruby you can call method with block and argurments
Higher level than java.
Not pure object oriented ---- blocks
Ruby uses Procs(savable blocks)


Supports container
-----------------------------------------------------------
					Array
a=%w[12,23]
satck =[1,2,3]
satck.push "cat"
[1,2,3,"cat"]
satck.pop
cat
satck[5]
nil
satck[5]="sd"
satck
[1,2,3,nil,nil,"sd"]

puts "Array is #{satck.inspect}"

---------------------------------------------------------------
Regular Expressions

/Python|Perl/
/P(ython|erl)/


/ab+c/
one or more b's

/ab*c/
zero or more b's

\s    martch any white space character

\w	  character in [A-Z][a-z][0-9]

\d    match any digit

.-    match any character

Substitution using regular expressions

strin.sub(/perl/,/ruby/) replaces perl with ruby

strin.gsub	(/P(ython|perl)/,/ruby/)


----------------------------------------------------------------
Ruby

The print
The print command just takes whatever you give it and prints it to the screen. puts (for "put string") is slightly different: it adds a new (blank) line after the thing you want it to print. You use them like this:
puts "What's up?"
print "Oxnard Montalvo"

The .reverse
The .reverse method is called the same way .length is, but instead of asking Ruby to tell you how long a string is, it spits out a backwards version of the string you gave it. For instance,


.upcase and .downcase
 .upcase and .downcase methods convert a string to ALL UPPER CASE or all lower case, respectively.
 
 
----------------- Multi-Line Comments
 =begin
		I'm a comment!
		I don't need any # symbols.
=end
 

chain them together, like this:
name.method1.method2.method3

---------------------------------------------------------
						Interactive Ruby
irb
quit

load '/path/to/File'

require 'fileutils'

FileUtils.cd 'mh/dir/'

FileeUtils.pwd

----------------------Input from user---------
print "What's your first name?"
first_name = gets.chomp
first_name.capitalize!


user_num = Integer(gets.chomp)

if user_num < 0
  puts "You picked a negative integer!"
elsif user_num > 0
  puts "You picked a positive integer!"
else
  puts "You picked zero!"
end

while counter < 11
  puts counter
  counter = counter + 1
end



---------------The 'Until' Loop
The complement to the while loop is the until loop. It's sort of like a backwards while:
counter = 1
until counter > 10
  puts counter
  # Add code to update 'counter' here!
  counter+=1 ;
  
end

for num in 1...10
  puts num
end


-----------------The Loop Method
So far we've learned one way to repeat an action in Ruby: using loops. As is often the case in Ruby, however, there's more than one way to accomplish a given task. In this case, it's also possible to repeat an action using an iterator.
i = 20
loop do
i -= 1
  print "#{i}";
  break if i <= 0
end




----------------------Next

The next keyword can be used to skip over certain steps in the loop. For instance, if we don't want to print out the even numbers, we can write:

for i in 1..5
  next if i % 2 == 0
  print i
end

------------------.each method
 A more useful iterator is the .each method, which can apply an expression to each element of an object, one at a time.
 array = [1,2,3,4,5]

array.each do |x|
  x += 10
  print "#{x}"
end



--------------------The .times Iterator
The .times method is like a super compact for loop: it can perform a task on each item in an object a specified number of times.
For example, if we wanted to print out "Chunky bacon!" ten times, we might type

10.times { print "Chunky bacon!" }


my_2d_array=[ ["Rohit","loves" ,"******"],["Naman" , "is","good" ,"in","sports"]];




-----------------------------Introduction to Hashes---------

We know that arrays are indexed with numbers that start with 0 and go up to the array's length minus one. (Think about it: an array with four elements has the indices 0, 1, 2, and 3.)

But what if we want to use numeric indices that don't go in order from 0 to the end of the array? What if we don't want to use numbers as indices at all? We'll need a new array structure called a hash.

Hashes are sort of like JavaScript objects or Python dictionaries. If you haven't studied those languages, all you need to know that a hash is a collection of key-value pairs. Hash syntax looks like this:

hash = {
  key1 => value1,
  key2 => value2,
  key3 => value3
}

Values are assigned to keys using =>. You can use any Ruby object for a key or value.



my_hash = { "name" => "Eric",
  "age" => 26,
  "hungry?" => true
}

puts my_hash["name"]
puts my_hash["age"]
puts my_hash["hungry?"]




--------------------------------Using Hash.new

What we just showed you was hash literal notation. We call it that because you literally describe what you want in the hash: you give it a name and you set it equal to a bunch of key => value pairs inside curly braces.

You can also create a hash using Hash.new, like so:

my_hash = Hash.new

Setting a variable equal to Hash.new creates a new, empty hash; it's the same as setting the variable equal to empty curly braces ({}).

Pets=Hash.new;
pets["Rohit"]="Dog";
pets["Nitish"]="Cat";


---------------------Why Methods?

A method is a reusable section of code written to perform a specific task in a program. You might be wondering why you need to separate your code into methods, rather than just writing everything out in one big chunk. It turns out there are a few good reasons to divide your programs into methods:

    If something goes wrong in your code, it's much easier to find and fix bugs if you've organized your program well. Assigning specific tasks to separate methods helps with this organization.

    By assigning specific tasks to separate methods (an idea computer scientists call separation of concerns), you make your program less redundant and your code more reusable—not only can you repeatedly use the same method in a single program without rewriting it each time, but you can even use that method in another program.

    When we learn more about objects, you'll find out there are a lot of interesting things we can do with methods in Ruby.

def prime(n)
  puts "That's not an integer." unless n.is_a? Integer
  is_prime = true
  for i in 2..n-1
    if n % i == 0
      is_prime = false
    end
  end
  if is_prime
    puts "#{n} is prime!"
  else
    puts "#{n} is not prime."
  end
end
prime(2)
prime(9)
prime(11)


----------------------------splat arguments.
 Splat arguments are arguments preceded by a *, which signals to Ruby: "Hey Ruby, I don't know how many arguments there are about to be, but it could be more than one."



def what_up(greeting, *bros)
  bros.each { |bro| puts "#{greeting}, #{bro}!" }
end
 
what_up("What up", "Justin", "Ben", "Kevin Sorbo")




--------------------------------Blocks Are Like Nameless Methods

Most methods that you've worked with have defined names that either you or someone else gave them (i.e. [array].sort(), "string".downcase(), and so on). You can think of blocks as a way of creating methods that don't have a name. (These are similar to anonymous functions in JavaScript or lambdas in Python.)

1.times do
  puts "I'm a code block!"
end

1.times { puts "As am I!" }


# method that capitalizes a word
def capitalize(string) 
  puts "#{string[0].upcase}#{string[1..-1]}"
end

capitalize("ryan") # prints "Ryan"
capitalize("jane") # prints "Jane"

# block that capitalizes each string in the array
["ryan", "jane"].each {|string| puts "#{string[0].upcase}#{string[1..-1]}"} # prints "Ryan", then "Jane"



--------------------------------Introduction to Sorting

Sorting arrays is a very common problem in computer science, and is well studied for that reason. There are many algorithms—well-defined sequences of steps—each with its own trade-offs and advantages.

my_array = [3, 4, 8, 7, 1, 6, 5, 9, 2]

# Call the sort! method on my_array below.
# my_array should then equal [1, 2, 3, 4, 5, 6, 7, 8, 9].

my_array.sort!


# library sorting code
books = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]

# How might we sort! the books in alphabetical order? (Hint, hint)

books.sort!

["A Brief History of Time", "A Wrinkle in Time", "Charlie and the Chocolate Factory", "Utopia", "War and Peace"]

	books = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]

# To sort our books in ascending order, in-place
books.sort! { |firstBook, secondBook| firstBook <=> secondBook }

# Sort your books in descending order, in-place below
books.sort! { |fb ,sb | sb<=>fb}
["War and Peace", "Utopia", "Charlie and the Chocolate Factory", "A Wrinkle in Time", "A Brief History of Time"]

Descending Order

fruits = ["orange", "apple", "banana", "pear", "grapes"]
fruits.sort! { |f1 , f2| f2<=>f1 };
----------------------------------------Hashes


Iterating Over Hashes

We can also iterate over hashes using the .each method. For example, we could do

my_hash.each do |key, value|
  puts key, my_hash[key]
end

To print out a list of keys and values from my_hash, each on its own line.


matz = { "First name" => "Yukihiro",
  "Last name" => "Matsumoto",
  "Age" => 47,
  "Nationality" => "Japanese",
  "Nickname" => "Matz"
}
matz.each { |nm,val| 
    puts val;
}

It's important to realize that false and nil are not the same thing: false means "not true," while nil is Ruby's way of saying "nothing at all."

funny-looking variables that start with colons are symbols




------------------------------------------Symbol----------
What's a Symbol?

You can think of a Ruby symbol as a sort of name. It's important to remember that symbols aren't strings:

"string" == :string # false

Above and beyond the different syntax, there's a key behavior of symbols that makes them different from strings: while there can be multiple different strings that all have the same value, there's only one copy of any particular symbol at a given time.



--------------------What are Symbols Used For?

Symbols pop up in a lot of places in Ruby, but they're primarily used either as hash keys or for referencing method names. (We'll see how symbols can reference methods in a later lesson.)

sounds = {
  :cat => "meow",
  :dog => "woof",
  :computer => 10010110,
}

--------------------------------Symbols make good hash keys for a few reasons:

    They're immutable, meaning they can't be changed once they're created;
    Only one copy of any symbol exists at a given time, so they save memory;
    Symbol-as-keys are faster than strings-as-keys because of the above two reasons.



-------------------------------Converting Between Symbols and Strings

Converting between strings and symbols is a snap.

:sasquatch.to_s
# ==> "sasquatch"

"sasquatch".to_sym
# ==> :sasquatch

The .to_s and .to_sym methods are what you're looking for!




Many Paths to the Same Summit

Remember, there are always many ways of accomplishing something in Ruby. Converting strings to symbols is no different!

Besides using .to_sym, you can also use .intern. This will internalize the string into a symbol and works just like .to_sym:

"hello".intern
# ==> :hello

When you're looking at someone else's code, you might see .to_sym or .intern (or both!) when converting strings to symbols.

strings = ["HTML", "CSS", "JavaScript", "Python", "Ruby"]
symbols=[];

# Add your code below!
strings.each{ |val| 
symbols.push(val.intern);
}



Becoming More Selective

----------------------Hash and Symbol

We know how to grab a specific value from a hash by specifying the associated key, but what if we want to filter a hash for values that meet certain criteria? For that, we can use .select.

grades = { alice: 100,
  bob: 92,
  chris: 95,
  dave: 97
}

grades.select {|name, grade| grade < 97}
# ==> {:bob=>92, :chris=>95}

grades.select { |k, v| k == :alice }
# ==> {:alice=>100}

    In the example above, we first create a grades hash that maps symbols to integers.
    Then we call the .select method and pass in a block of code. The block contains an expression for selecting matching key/value pairs. It returns a hash containing :bob and :chris.
    Finally, we call the .select method again. Our block looks only for the key :alice. This is an inefficient method of getting a key/value pair, but it shows that .select does not modify the hash.

(Here we're using "name" or "k" to stand for the key and "grade" or "v" to stand for the value, but as usual with blocks, you can call your variables whatever you like.)

-------------------------Hash Methods

.each_key and .each_value

Ruby includes two hash methods, .each_key and .each_value, that do exactly what you'd expect:
my_hash = { one: 1, two: 2, three: 3 }

my_hash.each_key { |k| print k, " " }
# ==> one two three

my_hash.each_value { |v| print v, " " }
# ==> 1 2 3


--------------------------- Best Practices----------------

puts "hi" if true;

puts "Fuck Off" unless false

puts true ? "You are rigth" : "You are wrong" ;

puts "Hello there!"
greeting = gets.chomp

# Add your case statement below!
case greeting
when "English"
    puts "Hello!";
when "French"
    puts "Bonjour";
    
when "German"
    puts "Guten Tag!";
    
when "Finnish"
    puts "Haloo!";
else
    puts "I don't know that language";
end;
'


----------------------------------95.upto(100) { |num| print num, " " }
# Prints 95 96 97 98 99 100


------------------------------------Call and Response

Ruby is less concerned about what kind of thing an object is and only really cares about what method calls it responds to.
Remember when we mentioned that symbols are awesome for referencing method names? Well, .respond_to? takes a symbol and returns true if an object can receive that method and false otherwise. For example,
[1, 2, 3].respond_to?(:push)
would return true, since you can call .push on an array object. However,[1, 2, 3].respond_to?(:to_sym)



---------------------------------Collect 'Em All

Good! There are a bunch of really useful Ruby methods that take blocks. One we haven't covered yet is collect.
The collect method takes a block and applies the expression in the block to every element in an array. Check it out:
my_nums = [1, 2, 3]
my_nums.collect { |num| num ** 2 }
# ==> [1, 4, 9]
If we look at the value of my_nums, though, we'll see it hasn't changed:
my_nums
# ==> [1, 2, 3]
This is because .collect returns a copy of my_nums, but doesn't change (or mutate) the original my_nums array. If we want to do that, we can use .collect! with an exclamation point:
my_nums.collect! { |num| num ** 2 }
# ==> [1, 4, 9]
my_nums
# ==> [1, 4, 9]
Recall that the ! in Ruby means "this method could do something dangerous or unexpected!" In this case, it mutates the original array instead of creating a new one.

------------------------------------Learning to Yield

Why do some methods accept a block and others don't? It's because methods that accept blocks have a way of transferring control from the calling method to the block and back again. We can build this into the methods we define by using the yield keyword.
def block_test
  puts "We're in the method!"
  puts "Yielding to the block..."
  yield
  puts "We're back in the method!"
end

block_test { puts ">>> We're in the block!" }


----------------------------Yielding With Parameters
def yield_name(name)
  puts "In the method! Let's yield."
  yield("Kim")
  puts "In between the yields!"
  yield(name)
  puts "Block complete! Back in the method."
end

yield_name("Eric") { |n| puts "My name is #{n}." }
yield_name("Rohit") { |n| puts "My name is "+n }
# Now call the method with your name!



------------------------------------Keeping Your Code DRY

Blocks are not objects, and this is one of the very few exceptions to the "everything is an object" rule in Ruby.
You can think of a proc as a "saved" block: just like you can give a bit of code a name and turn it into a method, you can name a block and turn it into a proc. Procs are great for keeping your code DRY, which stands for Don't Repeat Yourself. With blocks, you have to write your code out each time you need it; with a proc, you write your code once and can use it many times!

multiples_of_3 = Proc.new do |n|
  n % 3 == 0
end

(1..100).select(&multiples_of_3)

------------------------------ Proc Syntax

Procs are easy to define! You just call Proc.new and pass in the block you want to save. Here's how we'd create a proc called cube that cubes a number (raises it to the third power):

cube = Proc.new { |x| x ** 3 }

We can then pass the proc to a method that would otherwise take a block, and we don't have to rewrite the block over and over!

[1, 2, 3].collect!(&cube)
# ==> [1, 8, 27]
[4, 5, 6].map!(&cube)
# ==> [64, 125, 216]

(The .collect! and .map! methods do the exact same thing.)

The & is used to convert the cube proc into a block (since .collect! and .map! normally take a block). We'll do this any time we pass a proc to a method that expects a block.

----------------------- Why Procs?

Why bother saving our blocks as procs? There are two main advantages:

    Procs are full-fledged objects, so they have all the powers and abilities of objects. (Blocks do not.)
    Unlike blocks, procs can be called over and over without rewriting them. This prevents you from having to retype the contents of your block every time you need to execute a particular bit of code.


group_1 = [4.1, 5.5, 3.2, 3.3, 6.1, 3.9, 4.7]
group_2 = [7.0, 3.8, 6.2, 6.1, 4.4, 4.9, 3.0]
group_3 = [5.5, 5.1, 3.9, 4.3, 4.9, 3.2, 3.2]

# Complete this as a new Proc
over_4_feet=Proc.new { |height| height >= 4 }



# Change these three so that they use your new over_4_feet Proc
can_ride_1 = group_1.select(&over_4_feet) 
can_ride_2 = group_2.select(&over_4_feet)
can_ride_3 = group_3.select(&over_4_feet)
-----------------
def greeter()
    puts "In greeter";
    yield;
    puts "Return in method";
    
end;
phrase=Proc.new  { puts "Hello there!" }
greeter(&phrase)

---------------------- Call Me Maybe

Nice work! Calling a proc with a method isn't too tricky. However, there's an even easier way.

Unlike blocks, we can call procs directly by using Ruby's .call method. Check it out!

test = Proc.new { # does something }
test.call
# does that something!

--------------------------Convert symbols to procs using that handy little &.
numbers_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

strings_array = numbers_array.map(&:to_s);
puts strings_array;

 we turned each string into an string!
 
 ----------------------------The Ruby Lambda------------

Like procs, lambdas are objects. The similarities don't stop there: with the exception of a bit of syntax and a few behavioral quirks, lambdas are identical to procs.

Check out the code in the editor. See the lambda bit? Typing

lambda { puts "Hello!" }

Is just about the same as

Proc.new { puts "Hello!" }

In the example to the right, when we pass the lambda to lambda_demo, the method calls the lambda and executes its code.

def lambda_demo(a_lambda)
  puts "I'm the method!"
  a_lambda.call
end

lambda_demo(lambda { puts "I'm the lambda!" })


--------------------------------Lambdas vs. Procs


First, a lambda checks the number of arguments passed to it, while a proc does not. This means that a lambda will throw an error if you pass it the wrong number of arguments, whereas a proc will ignore unexpected arguments and assign nil to any that are missing.

Second, when a lambda returns, it passes control back to the calling method; when a proc returns, it does so immediately, without going back to the calling method

def batman_ironman_proc
  victor = Proc.new { return "Batman will win!1" }
  victor.call
  "Iron Man will win!2"
end

puts batman_ironman_proc

def batman_ironman_lambda
  victor = lambda { return "Batman will win!4" }
  victor.call
  "Iron Man will win3!"
end

puts batman_ironman_lambda
-----------output-----
Batman will win!1
Iron Man will win3!

my_array = ["raindrops", :kettles, "whiskers", :mittens, :packages]
symbol_filter = lambda {|x| x.is_a? Symbol }
symbols=my_array.select(&symbol_filter);
# Add your code below!
--------------------------------Classes

class Person
    def initialize(name)
        @name=name
    end
    
end
matz=Person.new("Yukihiro");

@ before a variable to signify that it's an instance variable. 


-----------------------Global , Class , Local Variables

class Computer
  $manufacturer = "Mango Computer, Inc."
  @@files = {hello: "Hello, world!"}
  
  def initialize(username, password)
    @username = username
    @password = password
  end
  
  def current_user
    @username
  end
  
  def self.display_files
    @@files
  end
end

# Make a new Computer instance:
hal = Computer.new("Dave", 12345)

puts "Current user: #{hal.current_user}"
# @username belongs to the hal instance.

puts "Manufacturer: #{$manufacturer}"
# $manufacturer is global! We can get it directly.

puts "Files: #{Computer.display_files}"
# @@files belongs to the Comput


It may surprise you to learn that not all variables are accessible to all parts of a Ruby program at all times. When dealing with classes, you can have variables that are available everywhere (global variables), ones that are only available certain methods (local variables), others that are members of a certain class (class variables), and variables that are only available to particular instances of a class (instance variables).

---------------Global Variable
Global variables can be declared in two ways. The first is one that's already familiar to you: you just define the variable outside of any method or class, and voilà! It's global. If you want to make a variable global from inside a method or class, just start it with a $, like so: $matz.
class MyClass
  $my_variable = "Hello!"
end

puts $my_variable

-----------------------Inheritance
class ApplicationError
  def display_error
    puts "Error! Error!"
  end
end

class SuperBadError < ApplicationError
end

err = SuperBadError.new
err.display_error

--------------------Super
class Creature
  def initialize(name)
    @name = name
  end
  
  def fight
    return "Punch to the chops!"
  end
end

# Add your code below!
class Dragon < Creature
    def fight
        puts "Instead of breathing fire..."
        super
    end
end


--------------No Multiple Inheritance

-----------attr_reader, attr_writer

The attr_reader method defines the reader method for you. This is a convenient shortcut that you can use when your getter simply returns the value of the variable of the same name. 

class Item
  
  def initialize(description, color)
    @description = description
    @color = color
  end
end


attr_reader :description will define def description; @description; end 

    attr_writer :description gives you def description=(new_description); @description = new_description; end
    and
    attr_accessor :description is equivalent to attr_reader :description; attr_writer :description

----------------------------------------------------------------------------

to_s -------to string


default methods are public


Variable is just a refrence to object...

You can have more than one variable referencing single object

Person 	=	"tim"
Person2	=	Person
Person3 = Person.dup

Person[0] = 'J'

puts " Name is #{Person}"
puts " Name is #{Person2}"
puts " Name is #{Person3}"

Person.superclass
Output:
Jim
Jim
tim


